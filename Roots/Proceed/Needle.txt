#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <malloc.h>
#include <fcntl.h>
#include <sys/resource.h>
#include <pthread.h>
#include <string.h>

typedef struct {
	int *array;
	int size;
} Segment;

static int MAX = 0;
static unsigned int SUM = 0;
static pthread_mutex_t mutex;

struct timeval difference(struct timeval start, struct timeval end) {
	struct timeval result = end;

	result.tv_sec -= start.tv_sec;
	result.tv_usec -= start.tv_usec;

	return result;
}

void *Max(void *args) {
	int i;
	int largest;
	Segment *array = (Segment *)args;
	
	largest = 0;
	for (i = 0; i < array->size; i++) {
		if (array->array[i] > largest) {
			largest = array->array[i];
		}
	}

	if (largest > MAX) {
		MAX = largest;
	}
	return NULL;
}

void *Sum(void *args) {
	int i;
	int tempsum;
	Segment *array = (Segment *)args;

	tempsum = 0;
	for (i = 0; i < array->size; i++) {
		tempsum += array->array[i];
	}

	pthread_mutex_lock(&mutex);
	SUM += tempsum;
	pthread_mutex_unlock(&mutex);

	return NULL;
}

int main(int argc, char *argv[]) {
	pthread_t *tids;
	int *array;
	int size, threads, segsize, remsize;
	int i;
	struct rusage start_ru, end_ru;
	struct timeval start_wall, end_wall;
	struct timeval diff_wall, diff_ru_u, diff_ru_s;

	/*Set Up and Array Generation*/
	size = atoi(argv[1]);
	threads = atoi(argv[2]);
	segsize = size / threads;
	remsize = size - (threads - 1) * segsize;
	tids = malloc(threads * sizeof(pthread_t));

	array = malloc(size * sizeof(int));
	srand(atoi(argv[3]));

	for (i = 0; i < size; i++) {
		array[i] = rand() % 101;
	}

	/* Checking Time Prior to Task */
	getrusage(RUSAGE_SELF, &start_ru);
	gettimeofday(&start_wall, NULL);

	/*Start Task*/
	if (atoi(argv[4]) == 1) {
		Segment **sections;
		Segment *end;
		int j;

		sections = malloc(sizeof(Segment) * (size - 1));
		/*Splitting up the array into chucks for analysis*/
		for (i = 0; i < threads - 1; i++) {
			sections[i] = malloc(sizeof(Segment));
			sections[i]->array = malloc(segsize * sizeof(int));
			for (j = 0; j < segsize; j++) {
				sections[i]->array[j] = array[i * segsize + j];
			}
			sections[i]->size = segsize;
			pthread_create(&tids[i], NULL, Max, sections[i]);
		}

		end = malloc(sizeof(Segment));
		end->array = malloc(sizeof(int) * remsize);
		for (j = 0; j < remsize; j++) {
			end->array[j] = array[i * segsize + j];
		}
		end->size = remsize;
		pthread_create(&tids[i], NULL, Max, end);


		for (i = 0; i < threads; i++) {
			pthread_join(tids[i], NULL);
		}
		if (strcmp(argv[5], "Y") == 0) {
			printf("Max: %d\n", MAX);
		}
	}
	else {
		Segment **sections;
		Segment *end;
		int j;

		pthread_mutex_init(&mutex, NULL);
		sections = malloc(sizeof(Segment) * (size - 1));
		/*Splitting up the array into chucks for analysis*/
		for (i = 0; i < threads - 1; i++) {
			sections[i] = malloc(sizeof(Segment));
			sections[i]->array = malloc(segsize * sizeof(int));
			for (j = 0; j < segsize; j++) {
				sections[i]->array[j] = array[i * segsize + j];
			}
			sections[i]->size = segsize;
			pthread_create(&tids[i], NULL, Sum, sections[i]);
		}

		end = malloc(sizeof(Segment));
		end->array = malloc(sizeof(int) * remsize);
		for (j = 0; j < remsize; j++) {
			end->array[j] = array[i * segsize + j];
		}
		end->size = remsize;
		pthread_create(&tids[i], NULL, Sum, end);


		for (i = 0; i < threads; i++) {
			pthread_join(tids[i], NULL);
		}
		pthread_mutex_destroy(&mutex);

		if (strcmp(argv[5], "Y") == 0) {
			printf("Sum: %d\n", SUM);
		}
	}

	/* Checking Time After Task Completion */
	gettimeofday(&end_wall, NULL);
	getrusage(RUSAGE_SELF, &end_ru);

	/* Finding the difference in time*/
	diff_ru_u = difference(start_ru.ru_utime, end_ru.ru_utime);
	diff_ru_s = difference(start_ru.ru_stime, end_ru.ru_stime);
	diff_wall = difference(start_wall, end_wall);

	printf("User time: %ld.%06ld\n", diff_ru_u.tv_sec, diff_ru_u.tv_usec);
	printf("System time: %ld.%06ld\n", diff_ru_s.tv_sec, diff_ru_s.tv_usec);
	printf("Wall time: %ld.%06ld\n", diff_wall.tv_sec, diff_wall.tv_usec);
	return 0;
}








				if (first != 3 && current == 5) {
					printf("Current: %lu, j: %lu, Ary[j]: %lu\n", current, j, ary[j]);
				}


		if (first != 3) {
			printf("Current: %lu\n", current);
		}
