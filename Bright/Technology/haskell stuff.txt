:cd C:\Users\nickz\Desktop\Haskell\Chapter
"Put the 4-byte value 4 bytes after the memory position in the register esp into the register eax"
mov (0x4)%esp, %eax

8b442404
8b44 2404
8b 44 24 04

10001011 01000100 00100100 00000100   -> literally what the CPU sees

0 0000
1 0001
2 0010
3 0011
4 0100
5 0101
6 0110
7 0111
8 1000
9 1001
a 1010
b 1011
c 1100
d 1101
e 1110
f 1111


Prelude> -- (3, 4) (7, 8)    sqrt
Prelude> sqrt 9
3.0
Prelude> 4 + (sqrt 9)
7.0
Prelude> 4 + sqrt 9
7.0
Prelude> sqrt ((7-3)^2 + (8-4)^2)
5.656854249492381
Prelude> sqrt 32
5.656854249492381
Prelude> sqrt (32)
5.656854249492381
Prelude> (+) 4 7
11
Prelude> (+) (4 7)

<interactive>:72:1: error:
    � Non type-variable argument in the constraint: Num (t -> a)
      (Use FlexibleContexts to permit this)
    � When checking the inferred type
        it :: forall a t. (Num (t -> a), Num t, Num a) => a -> a
Prelude> (+) (4) (7)
11
Prelude> (+) 4 7
11
Prelude> -- value of $10k loan after 5 years at 7% interest
Prelude> 10000*(1.07)^5
14025.517307000002
Prelude> sqrt (10000*(1.07)^5)
118.42937687499669
Prelude> (sqrt . sqrt) 256
4.0
Prelude> sqrt (sqrt 256)
4.0
Prelude> f = (sqrt . sqrt)
Prelude> f 4
1.4142135623730951
Prelude> f 256
4.0
Prelude> (f . f) 256
1.4142135623730951
Prelude> sqrt (sqrt (sqrt (sqrt 256))))

<interactive>:84:30: error: parse error on input �)�
Prelude> sqrt (sqrt (sqrt (sqrt 256)))
1.4142135623730951
Prelude> mod num 50 7

<interactive>:86:5: error:
    � Variable not in scope: num :: t0 -> t
    � Perhaps you meant �sum� (imported from Prelude)
Prelude> mod 50 7
1
Prelude> 50 `div` 7
7
Prelude> div 50 7
7
Prelude> (sqrt . div) 67 8

<interactive>:90:1: error:
    � Non type-variable argument in the constraint: Floating (a -> a)
      (Use FlexibleContexts to permit this)
    � When checking the inferred type
        it :: forall a. (Integral a, Floating (a -> a)) => a
Prelude> sqrt $ div 67 8

<interactive>:91:1: error:
    � Ambiguous type variable �a0� arising from a use of �it�
      prevents the constraint �(Floating a0)� from being solved.
      Probable fix: use a type annotation to specify what �a0� should be.
      These potential instances exist:
        instance Floating Double -- Defined in �GHC.Float�
        instance Floating Float -- Defined in �GHC.Float�
    � In the first argument of �print�, namely �it�
      In a stmt of an interactive GHCi command: print it
Prelude> div 67 8
8
Prelude> :t div 67 8
div 67 8 :: Integral a => a
Prelude> :t sqrt
sqrt :: Floating a => a -> a
Prelude> (sqrt . fromIntegral .div) 67 8

<interactive>:95:1: error:
    � Non type-variable argument in the constraint: Floating (t -> t1)
      (Use FlexibleContexts to permit this)
    � When checking the inferred type
        it :: forall t t1. (Num t, Floating (t -> t1)) => t1

<interactive>:95:9: error:
    � Could not deduce (Integral (a0 -> a0))
        arising from a use of �fromIntegral�
        (maybe you haven't applied a function to enough arguments?)
      from the context: (Num t, Floating (t -> t1))
        bound by the inferred type of
                 it :: (Num t, Floating (t -> t1)) => t1
        at <interactive>:95:1-31
      The type variable �a0� is ambiguous
    � In the first argument of �(.)�, namely �fromIntegral�
      In the second argument of �(.)�, namely �fromIntegral . div�
      In the expression: sqrt . fromIntegral . div

<interactive>:95:23: error:
    � Could not deduce (Integral a0) arising from a use of �div�
      from the context: (Num t, Floating (t -> t1))
        bound by the inferred type of
                 it :: (Num t, Floating (t -> t1)) => t1
        at <interactive>:95:1-31
      The type variable �a0� is ambiguous
      These potential instances exist:
        instance Integral Integer -- Defined in �GHC.Real�
        instance Integral Int -- Defined in �GHC.Real�
        instance Integral Word -- Defined in �GHC.Real�
    � In the second argument of �(.)�, namely �div�
      In the second argument of �(.)�, namely �fromIntegral . div�
      In the expression: sqrt . fromIntegral . div

<interactive>:95:28: error:
    � Could not deduce (Num a0) arising from the literal �67�
      from the context: (Num t, Floating (t -> t1))
        bound by the inferred type of
                 it :: (Num t, Floating (t -> t1)) => t1
        at <interactive>:95:1-31
      The type variable �a0� is ambiguous
      These potential instances exist:
        instance Num Integer -- Defined in �GHC.Num�
        instance Num Double -- Defined in �GHC.Float�
        instance Num Float -- Defined in �GHC.Float�
        ...plus two others
        ...plus four instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    � In the first argument of �sqrt . fromIntegral . div�, namely �67�
      In the expression: (sqrt . fromIntegral . div) 67 8
      In an equation for �it�: it = (sqrt . fromIntegral . div) 67 8
Prelude> (sqrt . fromIntegral . div) 67 8

<interactive>:96:1: error:
    � Non type-variable argument in the constraint: Floating (t -> t1)
      (Use FlexibleContexts to permit this)
    � When checking the inferred type
        it :: forall t t1. (Num t, Floating (t -> t1)) => t1

<interactive>:96:9: error:
    � Could not deduce (Integral (a0 -> a0))
        arising from a use of �fromIntegral�
        (maybe you haven't applied a function to enough arguments?)
      from the context: (Num t, Floating (t -> t1))
        bound by the inferred type of
                 it :: (Num t, Floating (t -> t1)) => t1
        at <interactive>:96:1-32
      The type variable �a0� is ambiguous
    � In the first argument of �(.)�, namely �fromIntegral�
      In the second argument of �(.)�, namely �fromIntegral . div�
      In the expression: sqrt . fromIntegral . div

<interactive>:96:24: error:
    � Could not deduce (Integral a0) arising from a use of �div�
      from the context: (Num t, Floating (t -> t1))
        bound by the inferred type of
                 it :: (Num t, Floating (t -> t1)) => t1
        at <interactive>:96:1-32
      The type variable �a0� is ambiguous
      These potential instances exist:
        instance Integral Integer -- Defined in �GHC.Real�
        instance Integral Int -- Defined in �GHC.Real�
        instance Integral Word -- Defined in �GHC.Real�
    � In the second argument of �(.)�, namely �div�
      In the second argument of �(.)�, namely �fromIntegral . div�
      In the expression: sqrt . fromIntegral . div

<interactive>:96:29: error:
    � Could not deduce (Num a0) arising from the literal �67�
      from the context: (Num t, Floating (t -> t1))
        bound by the inferred type of
                 it :: (Num t, Floating (t -> t1)) => t1
        at <interactive>:96:1-32
      The type variable �a0� is ambiguous
      These potential instances exist:
        instance Num Integer -- Defined in �GHC.Num�
        instance Num Double -- Defined in �GHC.Float�
        instance Num Float -- Defined in �GHC.Float�
        ...plus two others
        ...plus four instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    � In the first argument of �sqrt . fromIntegral . div�, namely �67�
      In the expression: (sqrt . fromIntegral . div) 67 8
      In an equation for �it�: it = (sqrt . fromIntegral . div) 67 8
Prelude> (sqrt . toIntegral . div) 67 8

<interactive>:97:9: error:
    � Variable not in scope:
        toIntegral :: (Integer -> Integer) -> t0 -> t
    � Perhaps you meant one of these:
        �toInteger� (imported from Prelude),
        �fromIntegral� (imported from Prelude)
Prelude> negate 5
-5
Prelude> sqrt (negate 10)
NaN
Prelude> sqrt (negate -10)

<interactive>:100:1: error:
    � Non type-variable argument in the constraint: Floating (a -> a)
      (Use FlexibleContexts to permit this)
    � When checking the inferred type
        it :: forall a. (Num a, Floating (a -> a)) => a -> a
Prelude> sqrt (negate (-10))
3.1622776601683795
Prelude> (-) 4 5
-1
Prelude> let f x = x^2
Prelude> f 1
1
Prelude> f 10
100
Prelude> (f . f) 5
625
Prelude> f f 5

<interactive>:107:1: error:
    � Non type-variable argument in the constraint: Num (a -> a)
      (Use FlexibleContexts to permit this)
    � When checking the inferred type
        it :: forall a. (Num (a -> a), Num a) => a
Prelude> f (f 5)
625
Prelude> let g = f . f
Prelude> g 5
625
Prelude> let applyTwice f x = (f . f) x
Prelude> applyTwice sqrt 16
2.0
Prelude> :t applyTwice
applyTwice :: (b -> b) -> b -> b
Prelude> :t sqrt
sqrt :: Floating a => a -> a
Prelude> applyTwice reverse "asd"
"asd"
Prelude> :t reverse
reverse :: [a] -> [a]
Prelude> :t "asd"
"asd" :: [Char]
Prelude> reverse [1, 2, 3]
[3,2,1]
Prelude> reverse "my name"
"eman ym"
Prelude> reverse [1..10]
[10,9,8,7,6,5,4,3,2,1]
Prelude> applyTwice (3 *) 6
54
Prelude> let avg a b = div (a + b) 2
Prelude> avg 6 8
7
Prelude> let averageWithSix = (avg 6)
Prelude> averageWithSix 10
8
Prelude> averageWithSix 12
9
Prelude> (avg 6) 12
9
Prelude> applyTwice (avg 6) 10
7
Prelude> (\x -> 3 + x) 8
11
Prelude> (\f -> (\x -> f (f x))) sqrt 64
2.8284271247461903
Prelude> let f x = x^2
Prelude> f = (\x -> x^2)
Prelude> f 4
16
Prelude> (\x -> x^2) 4
16
Prelude> 4^2
16
Prelude> 16
16
Prelude> [1, 2,3]
[1,2,3]
Prelude> map (\x -> x + 1) [1..10]
[2,3,4,5,6,7,8,9,10,11]
Prelude> squares = map (\x -> x^2) [1..100]
Prelude> squares
[1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676,729,784,841,900,961,1024,1089,1156,1225,1296,1369,1444,1521,1600,1681,1764,1849,1936,2025,2116,2209,2304,2401,2500,2601,2704,2809,2916,3025,3136,3249,3364,3481,3600,3721,3844,3969,4096,4225,4356,4489,4624,4761,4900,5041,5184,5329,5476,5625,5776,5929,6084,6241,6400,6561,6724,6889,7056,7225,7396,7569,7744,7921,8100,8281,8464,8649,8836,9025,9216,9409,9604,9801,10000]
Prelude> map (^ 2) [1..100]
[1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676,729,784,841,900,961,1024,1089,1156,1225,1296,1369,1444,1521,1600,1681,1764,1849,1936,2025,2116,2209,2304,2401,2500,2601,2704,2809,2916,3025,3136,3249,3364,3481,3600,3721,3844,3969,4096,4225,4356,4489,4624,4761,4900,5041,5184,5329,5476,5625,5776,5929,6084,6241,6400,6561,6724,6889,7056,7225,7396,7569,7744,7921,8100,8281,8464,8649,8836,9025,9216,9409,9604,9801,10000]
Prelude> map reverse ["the", "name", "is", "James", "Bond"]
["eht","eman","si","semaJ","dnoB"]
Prelude> let isEven = (\x -> mod x 2==0)
Prelude> filter isEven 1..100

<interactive>:144:16: error: parse error on input �..�
Prelude> filter isEven [1..100]
[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]
Prelude> reverse [1, 2, 3]
[3,2,1]
Prelude> reverse 45

<interactive>:147:1: error:
    � Non type-variable argument in the constraint: Num [a]
      (Use FlexibleContexts to permit this)
    � When checking the inferred type
        it :: forall a. Num [a] => [a]
Prelude> reverse ["abc", "def"]
["def","abc"]
Prelude> reverse (map reverse ["abc", "def"])
["fed","cba"]
Prelude> reverse $ map reverse ["abc", "def"]
["fed","cba"]
Prelude> sqrt sqrt 256

<interactive>:151:1: error:
    � Non type-variable argument in the constraint: Floating (a -> a)
      (Use FlexibleContexts to permit this)
    � When checking the inferred type
        it :: forall a. (Floating (a -> a), Floating a) => a
Prelude> sqrt (sqrt 256)
4.0
Prelude> sqrt $ sqrt 256
4.0
Prelude> tag name content = "<" ++ name ++ ">" ++ content ++ "</" ++ name ++ ">"
Prelude> tag "html" "..."
"<html>...</html>"
Prelude> tag "html" (tag "head" "...")
"<html><head>...</head></html>"
Prelude> :cd C:\Users\nickz\Desktop\Haskell
Prelude> :load "test.hs"
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, modules loaded: Main.
*Main> :reload

test.hs:7:21: error: Variable not in scope: doubleovyuv :: t -> t
[1 of 1] Compiling Main             ( test.hs, interpreted )
Failed, modules loaded: none.
Prelude> :reload
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, modules loaded: Main.
*Main> pfac 150
[2,3,5,5]
*Main> dist (4, 5) (10, 7)
6.324555320336759
*Main> digits 1334345
"1334345"
*Main> split "this is a test" ""

<interactive>:164:24: error:
    � Couldn't match expected type �Char� with actual type �[Char]�
    � In the second argument of �split�, namely �""�
      In the expression: split "this is a test" ""
      In an equation for �it�: it = split "this is a test" ""
*Main> split "this is a test" ' '
["this","is","a","test"]
*Main> split "this is a test" 'i'
["th","s ","s a test"]
*Main> isPrime 45
False
*Main> isPrime 47
True
*Main> rotateVowels "my name is zorro"
"my nemi os zurru"
*Main> :t quadruple
quadruple :: Integer -> Integer
*Main> factors 14
[1,2,7,14]
*Main> length "asd"
3
*Main> length [5, 6]
2
*Main> 5 : [9, 8]
[5,9,8]
*Main> 'a' : "ed"
"aed"
*Main> 8 : []
[8]
*Main> []: [8]

<interactive>:177:1: error:
    � Non type-variable argument in the constraint: Num [t]
      (Use FlexibleContexts to permit this)
    � When checking the inferred type
        it :: forall t. Num [t] => [[t]]
*Main> [] : []
[[]]
*Main> [] : [[], [], []]
[[],[],[],[]]
*Main> [8, 7] ++ [9, 8]
[8,7,9,8]
*Main> 8 ++ [9, 8]

<interactive>:181:1: error:
    � Non type-variable argument in the constraint: Num [a]
      (Use FlexibleContexts to permit this)
    � When checking the inferred type
        it :: forall a. (Num [a], Num a) => [a]
*Main> [8] ++ [9, 8]
[8,9,8]
*Main> 8 : [9, 8]
[8,9,8]
*Main> count "asd"
3
*Main> filter isPrime [1..1000]
[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]
*Main> filter isPrimeFast [1.1000]

<interactive>:186:1: error:
    � Ambiguous type variable �a0� arising from a use of �it�
      prevents the constraint �(Fractional a0)� from being solved.
      Probable fix: use a type annotation to specify what �a0� should be.
      These potential instances exist:
        instance Fractional Double -- Defined in �GHC.Float�
        instance Fractional Float -- Defined in �GHC.Float�
        ...plus one instance involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    � In the first argument of �print�, namely �it�
      In a stmt of an interactive GHCi command: print it
*Main> filter isPrimeFast [1..1000]
[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]
*Main> all [True, True,  True]

<interactive>:188:5: error:
    � Couldn't match expected type �a -> Bool�
                  with actual type �[Bool]�
    � In the first argument of �all�, namely �[True, True, True]�
      In the expression: all [True, True, True]
      In an equation for �it�: it = all [True, True, True]
    � Relevant bindings include
        it :: t a -> Bool (bound at <interactive>:188:1)
*Main> and [True, True, True]
True
*Main> (sqrt . fromIntegral) 45
6.708203932499369
*Main> (floor . sqrt . fromIntegral) 45
6
*Main> :reload
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, modules loaded: Main.
*Main> filter isPrimeBlazing [1..1000]
[1,2,3]
*Main> :reload
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, modules loaded: Main.
*Main> filter isPrimeBlazing [1..1000]
[1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]
*Main> filter isPrimeBlazing [1..10000]
[1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973]
*Main> length $ filter isPrimeBlazing [1..10000]
1230
*Main> length $ filter isPrimeFast [1..10000]
1229
*Main> filter isPrimeBlazing [1..10000]
[1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973]
*Main> filter isPrimeBlazing [1..1000]
[1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]
*Main> :reload
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, modules loaded: Main.
*Main> filter isPrimeBlazing [1..1000]
[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]
*Main> 3 : 5 : [7, 8]
[3,5,7,8]
*Main> pfac 90
[2,3,3,5]
*Main> :reload
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, modules loaded: Main.
*Main> pfac 90
[2,3,3,5]
*Main> pfac (-4)
[]
*Main> map (\x -> (product x, x)) $ filter (\x -> length x == 4) $ map pfac [2..1000]
[(16,[2,2,2,2]),(24,[2,2,2,3]),(36,[2,2,3,3]),(40,[2,2,2,5]),(54,[2,3,3,3]),(56,[2,2,2,7]),(60,[2,2,3,5]),(81,[3,3,3,3]),(84,[2,2,3,7]),(88,[2,2,2,11]),(90,[2,3,3,5]),(100,[2,2,5,5]),(104,[2,2,2,13]),(126,[2,3,3,7]),(132,[2,2,3,11]),(135,[3,3,3,5]),(136,[2,2,2,17]),(140,[2,2,5,7]),(150,[2,3,5,5]),(152,[2,2,2,19]),(156,[2,2,3,13]),(184,[2,2,2,23]),(189,[3,3,3,7]),(196,[2,2,7,7]),(198,[2,3,3,11]),(204,[2,2,3,17]),(210,[2,3,5,7]),(220,[2,2,5,11]),(225,[3,3,5,5]),(228,[2,2,3,19]),(232,[2,2,2,29]),(234,[2,3,3,13]),(248,[2,2,2,31]),(250,[2,5,5,5]),(260,[2,2,5,13]),(276,[2,2,3,23]),(294,[2,3,7,7]),(296,[2,2,2,37]),(297,[3,3,3,11]),(306,[2,3,3,17]),(308,[2,2,7,11]),(315,[3,3,5,7]),(328,[2,2,2,41]),(330,[2,3,5,11]),(340,[2,2,5,17]),(342,[2,3,3,19]),(344,[2,2,2,43]),(348,[2,2,3,29]),(350,[2,5,5,7]),(351,[3,3,3,13]),(364,[2,2,7,13]),(372,[2,2,3,31]),(375,[3,5,5,5]),(376,[2,2,2,47]),(380,[2,2,5,19]),(390,[2,3,5,13]),(414,[2,3,3,23]),(424,[2,2,2,53]),(441,[3,3,7,7]),(444,[2,2,3,37]),(459,[3,3,3,17]),(460,[2,2,5,23]),(462,[2,3,7,11]),(472,[2,2,2,59]),(476,[2,2,7,17]),(484,[2,2,11,11]),(488,[2,2,2,61]),(490,[2,5,7,7]),(492,[2,2,3,41]),(495,[3,3,5,11]),(510,[2,3,5,17]),(513,[3,3,3,19]),(516,[2,2,3,43]),(522,[2,3,3,29]),(525,[3,5,5,7]),(532,[2,2,7,19]),(536,[2,2,2,67]),(546,[2,3,7,13]),(550,[2,5,5,11]),(558,[2,3,3,31]),(564,[2,2,3,47]),(568,[2,2,2,71]),(570,[2,3,5,19]),(572,[2,2,11,13]),(580,[2,2,5,29]),(584,[2,2,2,73]),(585,[3,3,5,13]),(620,[2,2,5,31]),(621,[3,3,3,23]),(625,[5,5,5,5]),(632,[2,2,2,79]),(636,[2,2,3,53]),(644,[2,2,7,23]),(650,[2,5,5,13]),(664,[2,2,2,83]),(666,[2,3,3,37]),(676,[2,2,13,13]),(686,[2,7,7,7]),(690,[2,3,5,23]),(693,[3,3,7,11]),(708,[2,2,3,59]),(712,[2,2,2,89]),(714,[2,3,7,17]),(726,[2,3,11,11]),(732,[2,2,3,61]),(735,[3,5,7,7]),(738,[2,3,3,41]),(740,[2,2,5,37]),(748,[2,2,11,17]),(765,[3,3,5,17]),(770,[2,5,7,11]),(774,[2,3,3,43]),(776,[2,2,2,97]),(783,[3,3,3,29]),(798,[2,3,7,19]),(804,[2,2,3,67]),(808,[2,2,2,101]),(812,[2,2,7,29]),(819,[3,3,7,13]),(820,[2,2,5,41]),(824,[2,2,2,103]),(825,[3,5,5,11]),(836,[2,2,11,19]),(837,[3,3,3,31]),(846,[2,3,3,47]),(850,[2,5,5,17]),(852,[2,2,3,71]),(855,[3,3,5,19]),(856,[2,2,2,107]),(858,[2,3,11,13]),(860,[2,2,5,43]),(868,[2,2,7,31]),(870,[2,3,5,29]),(872,[2,2,2,109]),(875,[5,5,5,7]),(876,[2,2,3,73]),(884,[2,2,13,17]),(904,[2,2,2,113]),(910,[2,5,7,13]),(930,[2,3,5,31]),(940,[2,2,5,47]),(948,[2,2,3,79]),(950,[2,5,5,19]),(954,[2,3,3,53]),(966,[2,3,7,23]),(975,[3,5,5,13]),(988,[2,2,13,19]),(996,[2,2,3,83]),(999,[3,3,3,37])]
*Main> map (\x -> (product x, x)) $ filter (\x -> length x == 4) $ map pfac [2..50]
[(16,[2,2,2,2]),(24,[2,2,2,3]),(36,[2,2,3,3]),(40,[2,2,2,5])]
*Main> map pfac [2..50]
[[2],[3],[2,2],[5],[2,3],[7],[2,2,2],[3,3],[2,5],[11],[2,2,3],[13],[2,7],[3,5],[2,2,2,2],[17],[2,3,3],[19],[2,2,5],[3,7],[2,11],[23],[2,2,2,3],[5,5],[2,13],[3,3,3],[2,2,7],[29],[2,3,5],[31],[2,2,2,2,2],[3,11],[2,17],[5,7],[2,2,3,3],[37],[2,19],[3,13],[2,2,2,5],[41],[2,3,7],[43],[2,2,11],[3,3,5],[2,23],[47],[2,2,2,2,3],[7,7],[2,5,5]]
*Main> filter (\x -> length x == 4) $ map pfac [2..50]
[[2,2,2,2],[2,2,2,3],[2,2,3,3],[2,2,2,5]]
*Main> map (\x -> (product x, x)) $ filter (\x -> length x == 4) $ map pfac [2..50]
[(16,[2,2,2,2]),(24,[2,2,2,3]),(36,[2,2,3,3]),(40,[2,2,2,5])]
*Main> product [3, 4, 5]
60
*Main>
